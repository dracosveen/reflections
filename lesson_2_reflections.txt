What happens when you initialize a repository? Why do you need to do it?

You create a place within git which allows you to track changes to the files
in the repository or directory.  No commits are done on init so you need
to commit in order to start tracking files and the changes that may be made.

git init - initialize a repository
git add - add files to statging area ready to be committed
git status - check the curretn status of a repo
staging area - intermediate area between working directory and git repository
working directory - this is where all work is done.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

This is where files that you are ready to commit are kept.  The value is that
you can't accidentally change a file that you want to commit before doing so.

How can you use the staging area to make sure you have one commit
per logical change?

By using the command git diff you can see changes between working directory and
the staging area.  You can then edit the staging area as necessary.

How do the diagrams help you visualize the branch structure?

You can draw a tree and see the whole linked list structure of nodes.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When you merge you are bringing 2 sets of code together into one project
so that anyone that get the latest commit of the master branch will get
all of the code that has been added.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?

Always fix conflicts manually
